import os

import cv2

# –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º –∏ –∫–∞—Å–∫–∞–¥–∞–º
video_folder = "input_video"
cascade_folder = "haarcascades"

# –°–ø–∏—Å–æ–∫ –∫–∞—Å–∫–∞–¥–æ–≤ (—Ñ–∞–π–ª: –æ–ø–∏—Å–∞–Ω–∏–µ)
haar_cascades = {
    "haarcascade_eye.xml": "–ì–ª–∞–∑–∞",
    "haarcascade_eye_tree_eyeglasses.xml": "–ì–ª–∞–∑–∞ –≤ –æ—á–∫–∞—Ö",
    "haarcascade_frontalcatface.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—à–∞—á—å—è –º–æ—Ä–¥–∞",
    "haarcascade_frontalcatface_extended.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—à–∞—á—å—è –º–æ—Ä–¥–∞",
    "haarcascade_frontalface_alt.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ 1",
    "haarcascade_frontalface_alt2.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ 2",
    "haarcascade_frontalface_alt_tree.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ –∫–∞—Å–∫–∞–¥",
    "haarcascade_frontalface_default.xml": "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
    "haarcascade_fullbody.xml": "–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ",
    "haarcascade_lefteye_2splits.xml": "–õ–µ–≤—ã–π –≥–ª–∞–∑",
    "haarcascade_licence_plate_rus_16stages.xml": "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏",
    "haarcascade_lowerbody.xml": "–ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Ç–µ–ª–∞",
    "haarcascade_profileface.xml": "–ü—Ä–æ—Ñ–∏–ª—å –ª–∏—Ü–∞",
    "haarcascade_righteye_2splits.xml": "–ü—Ä–∞–≤—ã–π –≥–ª–∞–∑",
    "haarcascade_russian_plate_number.xml": "–ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏",
    "haarcascade_smile.xml": "–£–ª—ã–±–∫–∞",
    "haarcascade_upperbody.xml": "–í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Ç–µ–ª–∞"
}

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤
video_files = [f for f in os.listdir(video_folder) if f.endswith(('.mp4', '.avi', '.mov'))]

for video_file in video_files:
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {video_file}")
    cap = cv2.VideoCapture(os.path.join(video_folder, video_file))

    if not cap.isOpened():
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_file}")
        continue

    for cascade_file, description in haar_cascades.items():
        cascade_path = os.path.join(cascade_folder, cascade_file)
        if not os.path.exists(cascade_path):
            print(f"‚ö†Ô∏è –ö–∞—Å–∫–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {cascade_path}")
            continue

        print(f"  ‚ñ∂Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å–∫–∞–¥–∞: {description} ({cascade_file})")
        detector = cv2.CascadeClassifier(cascade_path)

        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –≤–∏–¥–µ–æ

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            objects = detector.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=4)

            for (x, y, w, h) in objects:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            label = f"{description} ({cascade_file})"
            cv2.putText(frame, label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)
            cv2.imshow("Detection", frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cv2.destroyAllWindows()

    cap.release()

cv2.destroyAllWindows()
